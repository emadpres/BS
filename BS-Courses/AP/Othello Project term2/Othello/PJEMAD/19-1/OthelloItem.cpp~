#include "OthelloItem.h"
#include <cmath>
#include <QPolygonF>
#include <QPainter>

OthelloItem::OthelloItem(OthelloBoard * board, int row, int column): QGraphicsEllipseItem(board)
{
	setRect(column*ITEM_WIDTH + 0.075 * ITEM_WIDTH,row*ITEM_WIDTH + 0.075 * ITEM_WIDTH,ITEM_WIDTH*0.85,ITEM_WIDTH*0.85);
	setPen(QPen(Qt::NoPen));
	
	this->board = board;
	this->row = row;
	this->column = column;
	
	initializeStar();
	initializeCircle();

	changeTo(EMPTY);
}

void OthelloItem::initializeStar()
{
	QPolygonF polygon;
	int starwidth = ITEM_WIDTH * 0.6;
	polygon << QPointF(starwidth, starwidth/2);
	for (int i = 1; i <5; ++i)
   		polygon << QPointF(starwidth/2 + starwidth/2 * cos(0.8 * i * 3.14), starwidth/2 + starwidth/2 * sin(0.8 * i * 3.14));
	starPolygon = new QGraphicsPolygonItem (polygon,this);
	int offSet = 0.2 * ITEM_WIDTH;
   starPolygon->translate(column*ITEM_WIDTH + offSet, row*ITEM_WIDTH +  offSet);
	starPolygon->setPen(QPen(Qt::NoPen));
	starPolygon->setBrush(QBrush(QColor(Qt::yellow)));
	starPolygon->setFillRule(Qt::WindingFill);
	starPolygon->hide();
}

void OthelloItem::initializeCircle()
{
	QPolygonF polygon;
	int width = ITEM_WIDTH * 0.7;
	polygon << QPointF(width, width/2);
	for (int i = 1; i <10; ++i)
   		polygon << QPointF(width/2 + width/2 * cos(0.6 * i * 3.14), width/2 + width/2 * sin(0.6 * i * 3.14));
	tenPolygon = new QGraphicsPolygonItem (polygon, this);
	int offSet = 0.15 * ITEM_WIDTH;
  	tenPolygon->translate(column*ITEM_WIDTH + offSet, row*ITEM_WIDTH +  offSet);
	tenPolygon->setPen(QPen(Qt::NoPen));
	tenPolygon->setBrush(QBrush(QColor::fromRgb(220,210,40)));
	tenPolygon->setFillRule(Qt::WindingFill);
	tenPolygon->hide();	
	
	circle = new QGraphicsEllipseItem(tenPolygon);
	int circlewidth = ITEM_WIDTH * 0.5;
	int circleOffSet = ITEM_WIDTH * 0.1;
	circle->setRect(circleOffSet, circleOffSet, circlewidth , circlewidth);
	circle->setPen(QPen(Qt::NoPen));
	circle->setBrush(QBrush(QColor::fromRgb(245,205,30)));
}

void OthelloItem::changeTo(int turn)
{
	switch(turn)
	{
		case WHITE:
			QTimer::singleShot(board->delayDuration, this, SLOT(paintWhite()));
			this->state = WHITE;
			break;						
		case BLACK:
			QTimer::singleShot(board->delayDuration, this, SLOT(paintBlack()));
			this->state = BLACK;
			break;
		case EMPTY:
			this->state = EMPTY;
			paintEmpty();
			break;
		case HOLE:
				this->state = HOLE;
//				QTimer::singleShot(board->delayDuration + 300, this, SLOT(paintHole()));
			paintEmpty();
	}
}

void OthelloItem::paintEmpty()
{
	starPolygon->hide();
	tenPolygon->hide();
	setBrush(QBrush(QColor::fromRgb(52,101,164)));
	setPen(QPen(Qt::NoPen));
	setOpacity(1);
}

void OthelloItem::paintHole()
{
	if (board->currentTurn==BLACK && state==HOLE)
	{
		starPolygon->show();
		tenPolygon->hide();
	}
	else if (board->currentTurn==WHITE && state==HOLE)
	{
		starPolygon->hide();
		tenPolygon->show();
	} 
	setOpacity(0.7);
}

void OthelloItem::paintWhite()
{
	starPolygon->hide();
	tenPolygon->show();
	setBrush(QBrush(Qt::white));
	setPen(QPen(Qt::NoPen));
	setOpacity(1);
}
void OthelloItem::paintBlack()	
{
	tenPolygon->hide();
	starPolygon->show();
	setBrush(QBrush(QColor::fromRgb(51,51,51)));
	setPen(QColor::fromRgb(104,104,87));
	setOpacity(1);
}

void OthelloItem::mousePressEvent ( QGraphicsSceneMouseEvent * event )
{
	//if (state == HOLE && board->currentTurn==board->humanTurn)
		board->controller->humanPlay(row, column);
}

