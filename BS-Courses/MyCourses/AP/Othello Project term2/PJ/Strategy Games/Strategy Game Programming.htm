<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0032)http://www.fierz.ch/strategy.htm -->
<HTML><HEAD><TITLE>Strategy Game Programming</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 8.00.7600.16385">
<META name=FORMATTER content="Arachnophilia 3.2"></HEAD>
<BODY leftMargin=0 topMargin=0 bgColor=#ffffff text=#000000>
<TABLE border=0 cellSpacing=0 cellPadding=20 width="100%" bgColor=#000000>
  <TBODY>
  <TR>
    <TD><FONT color=#bbbbbb size=6 face=Ventura><B>Strategy Game 
      Programming</B> </FONT></TD>
    <TD align=right><FONT color=#ff0000 size=6 
      face=Ventura><B>Introduction</B> </FONT></TD></TR></TBODY></TABLE>
<TABLE border=0 cellSpacing=0 cellPadding=20 width="100%" bgColor=#ffffff>
  <TBODY>
  <TR>
    <TD>These pages intend to give a comprehensive overview of the elements of 
      a computer program which can play two-player strategy games like 
      tic-tac-toe, connect four, checkers and chess. I will always assume the 
      players to be called 'white' and 'black', with 'white' being the one to 
      move first in the game. Evaluations will be given from white's point of 
      view. Code fragments are written in C. I have organized this tutorial in 
      five parts: 
      <UL>
        <LI><A href="http://www.fierz.ch/strategy1.htm">Basics</A> 
        <LI><A href="http://www.fierz.ch/strategy2.htm">Enhancements</A> 
        <LI><A href="http://www.fierz.ch/strategy3.htm">Endgame Databases</A> 
        <LI><A href="http://www.fierz.ch/strategy4.htm">Opening Databases</A> 
        <LI><A href="http://www.fierz.ch/strategy5.htm">Philisophical or 
        scientific questions, and links</A> </LI></UL>I will develop a C skeleton 
      for strategy games to which only game-specific code will have to be added, 
      but which takes care of the rest of the strategy game playing part. 
      <P>Perhaps you wonder whether you should read this stuff. What does this 
      guy know anyway? As an avid chess player, I wanted to write a chess 
      program as soon as I got my first computer, an Atari ST back in 1987 or 
      so. Knowing nothing of all the things I'm writing about now, I failed 
      miserably. I went back to square one and started over with simpler things. 
      I wrote a connect four program, and a program to solve the game of 
      Solitaire for my grandmother, and that was about that for a long time. In 
      1996 I started a checkers program which today has become the de-facto 
      standard for checkers, since it is - at the time of writing - by far the 
      best free checkers program around. I generated the 8-piece endgame 
      database for checkers, and also wrote an automated opening book generator 
      for checkers. Finally, in the summer of 2002 I wrote a chess program. It's 
      a decent amateur program, but nothing more. I never found the time to work 
      on it seriously - I'm sure I could improve it, however I have no idea 
      whether it would become a really good program. 
      <P>Most computer programs nowadays use a brute-force approach to games - 
      this is also called the Shannon-A strategy, named after Claude Shannon, a 
      computer science pioneer. He wrote the first computer chess program, at a 
      time when the word computer had a completely different meaning: a person 
      who computed according to fixed rules. He even had his program play a game 
      of chess, that must have been a lot of work! At this time, Shannon guessed 
      that there would be a more promising approach to game-playing, a more 
      human way: look at promising continuations instead of looking at all 
      possibilities. This is the so-called Shannon-B strategy, supposed to mimic 
      humans. However, it seems that with the incredible computing power of 
      modern PC's the brute-force approach is better. Most computer programs 
      playing chess and similar games nowadays use the brute-force approach, 
      where you basically look at all possibilities for both sides up to a fixed 
      depth. Most of these programs also use selective extensions, but this 
      'selective' search is far away from what Shannon envisioned with his 
      B-strategy - human-like look-ahead where only very few possibilities are 
      considered. Human chess masters might calculate about one or two positions 
      per second, and can still compete with chess programs that are calculating 
      millions of positions per second. This gives you an idea of just how much 
      more selective the search of the human is! <BR>To sum up this in one 
      sentence: <STRONG>Computers play strategy games by generating all possible 
      continuations up to a (more or less) fixed depth and evaluating the 
      resulting positions, which allows them to choose the best of these 
      continuations.</STRONG> 
      <P>Comments and questions are welcome!
      <HR color=#888888>

      <CENTER>[ <A href="http://www.fierz.ch/">Author homepage</A> | <A 
      href="http://www.fierz.ch/strategy.htm">Introduction</A> | <A 
      href="http://www.fierz.ch/strategy1.htm">Part I</A> | <A 
      href="http://www.fierz.ch/strategy2.htm">Part II</A> | <A 
      href="http://www.fierz.ch/strategy3.htm">Part III</A> | <A 
      href="http://www.fierz.ch/strategy4.htm">Part IV</A> | <A 
      href="http://www.fierz.ch/strategy5.htm">Part V</A> ] 
      <P>This page was modified on 04.05.2005 using <A 
      href="http://www.arachnoid.com/"><IMG border=0 alt=arachnoid align=middle 
      src="Strategy%20Game%20Programming_files/arachno.gif"></A> 
  </CENTER></P></TD></TR></TBODY></TABLE></BODY></HTML>
